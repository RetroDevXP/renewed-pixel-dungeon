apply plugin: 'com.android.application'
configurations {
    natives
}

dependencies {
    implementation project(':core')
    implementation "com.badlogicgames.gdx:gdx-backend-android:1.10.0"
    // implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-armeabi"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-arm64-v8a"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-armeabi-v7a"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86_64"

    natives "com.badlogicgames.gdx:gdx-backend-android:1.10.0"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86_64"
}

repositories{
    mavenCentral()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    buildToolsVersion "33.0.2"
    compileSdkVersion 33
    namespace "com.retrodevxp.pd.android"
	defaultConfig {
		applicationId appId
		versionCode project.ext.versionCode
		versionName version
        targetSdk 33
	}
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            // jniLibs.srcDirs = ['libs']
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
        
        

        // instrumentTest.setRoot('tests')
    }
    packagingOptions {
        pickFirst '**/*.so'
    }
}

// needed to add JNI shared libraries to APK when compiling on CLI
// tasks.withType(com.android.build.gradle.tasks.PackageApplication) { pkgTask ->
//     pkgTask.jniFolders = new HashSet<File>()
//     pkgTask.jniFolders.add(new File(projectDir, 'libs'))
// }

// called every time gradle gets executed, takes the native dependencies of
// the natives configuration, and extracts them to the proper libs/ folders
// so they get packed with the APK.
// task copyAndroidNatives() { 
//     file("libs/armeabi/").mkdirs();
//     file("libs/armeabi-v7a/").mkdirs();
//     file("libs/x86/").mkdirs();

//     configurations.natives.files.each { jar ->
//         def outputDir = null
//         if(jar.name.endsWith("natives-armeabi-v7a.jar")) outputDir = file("libs/armeabi-v7a")
//         if(jar.name.endsWith("natives-armeabi.jar")) outputDir = file("libs/armeabi")
//         if(jar.name.endsWith("natives-arm64.jar")) outputDir = file("libs/arm64")
//         if(jar.name.endsWith("natives-x86.jar")) outputDir = file("libs/x86")
//         if(jar.name.endsWith("natives-x86_64.jar")) outputDir = file("libs/x86_64")
//         if(outputDir != null) {
//             copy {
//                 from zipTree(jar)
//                 into outputDir
//                 include "*.so"
//             }
//         }
//     }
// }

// task copyNatives {
//     doLast {
//         configurations.natives.files.each { jar ->
//             copy {
//                 from zipTree(jar)
//                 into "$projectDir/libs"
//                 include "**/*.so"
//             }
//         }
//     }
// }

// task copyNatives {
//     outputs.dir "$projectDir/src/main/jniLibs"
//     doLast {
//         configurations.natives.files.each { jar ->
//         println "Found native jar: $jar";
//             copy {
//                 from(zipTree(jar)) {
//                     include "lib/**/*.so"
//                     includeEmptyDirs = false
//                 }
//                 into "$projectDir/src/main/jniLibs"
//             }
//         }
//         println "Copied native libs."
//     }
// }

task copyNatives {
    outputs.dir "$projectDir/src/main/jniLibs"
    doLast {
        configurations.natives.files.each { jar ->
            println "Inspecting native jar: $jar"
            def zip = zipTree(jar)
            def entries = zip.matching { include "lib/**/*.so" }
            if (entries.isEmpty()) {
                println ".so files not found in: $jar"
            } else {
                println ".so files found in: $jar"
                entries.each { println " - ${it}" }
            }

            copy {
                from(entries)
                into "$projectDir/src/main/jniLibs"
            }
        }
    }
}

// task copyNatives {
//     doLast {
//         configurations.natives.files.each { jar ->
//             copy {
//                 from(zipTree(jar)) {
//                     include "lib/**/lib*.so"
//                     eachFile { details ->
//                         // Strip 'lib/' prefix so it's placed under libs/abi/
//                         details.path = details.path - "lib/"
//                     }
//                     includeEmptyDirs = false
//                 }
//                 // into "$projectDir/libs"
//                 into "$projectDir/src/main/jniLibs"
//             }
//         }
//         System.out.println("Log");
//     }
// }
preBuild.dependsOn copyNatives

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.retrodevxp.pd.android/com.retrodevxp.pd.android.AndroidLauncher'
}

// sets up the Android Eclipse project, using the old Ant based build.
// eclipse {
//     // need to specify Java source sets explicitely, SpringSource Gradle Eclipse plugin
//     // ignores any nodes added in classpath.file.withXml
//     sourceSets {
//         main {
//             java.srcDirs "src", 'gen'
//         }
//     }

//     jdt {
//         sourceCompatibility = 1.8
//         targetCompatibility = 1.8
//     }

//     classpath {
//         plusConfigurations += project.configurations.implementation        
//         containers 'com.android.ide.eclipse.adt.ANDROID_FRAMEWORK', 'com.android.ide.eclipse.adt.LIBRARIES'       
//     }

//     project {
//         name = appName + "-android"
//         natures 'com.android.ide.eclipse.adt.AndroidNature'
//         buildCommands.clear();
//         buildCommand "com.android.ide.eclipse.adt.ResourceManagerBuilder"
//         buildCommand "com.android.ide.eclipse.adt.PreCompilerBuilder"
//         buildCommand "org.eclipse.jdt.core.javabuilder"
//         buildCommand "com.android.ide.eclipse.adt.ApkBuilder"
//     }
// }

// sets up the Android Idea project, using the old Ant based build.
idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.implementation]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}
