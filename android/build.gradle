apply plugin: 'com.android.application'
configurations {
    natives
}

dependencies {
    implementation project(':core')
    implementation "com.badlogicgames.gdx:gdx-backend-android:1.10.0"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-arm64-v8a"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-armeabi-v7a"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86"
    implementation "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86_64"

    natives "com.badlogicgames.gdx:gdx-backend-android:1.10.0"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-arm64-v8a"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-armeabi-v7a"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86"
    natives "com.badlogicgames.gdx:gdx-platform:1.10.0:natives-x86_64"
}

repositories{
    mavenCentral()
    google()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

android {
    buildToolsVersion "33.0.2"
    compileSdkVersion 33
    namespace "com.retrodevxp.pd.android"
	defaultConfig {
		applicationId appId
		versionCode project.ext.versionCode
		versionName version
        targetSdk 33
	}
    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
        
        

    }
    packagingOptions {
        pickFirst '**/*.so'
    }
}


task copyNatives {
    outputs.dir "$projectDir/src/main/jniLibs"
    doLast {
        configurations.natives.files.each { jar ->
            println "Inspecting native jar: $jar"
            def zip = zipTree(jar)
            def entries = zip.matching { include "lib/**/*.so" }
            if (entries.isEmpty()) {
                println ".so files not found in: $jar"
            } else {
                println ".so files found in: $jar"
                entries.each { println " - ${it}" }
            }

            copy {
                from(entries)
                into "$projectDir/src/main/jniLibs"
            }
        }
    }
}


preBuild.dependsOn copyNatives

task run(type: Exec) {
    def path
    def localProperties = project.file("../local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream { instr ->
            properties.load(instr)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        if (sdkDir) {
            path = sdkDir
        } else {
            path = "$System.env.ANDROID_HOME"
        }
    } else {
        path = "$System.env.ANDROID_HOME"
    }

    def adb = path + "/platform-tools/adb"
    commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.retrodevxp.pd.android/com.retrodevxp.pd.android.AndroidLauncher'
}


idea {
    module {
        sourceDirs += file("src");
        scopes = [ COMPILE: [plus:[project.configurations.implementation]]]        

        iml {
            withXml {
                def node = it.asNode()
                def builder = NodeBuilder.newInstance();
                builder.current = node;
                builder.component(name: "FacetManager") {
                    facet(type: "android", name: "Android") {
                        configuration {
                            option(name: "UPDATE_PROPERTY_FILES", value:"true")
                        }
                    }
                }
            }
        }
    }
}
